A new array res is constructed using the following procedure:

Sort the numbers in each group independently.
Append the elements of groups 1, 2, and 3 to res in this order.
Input: nums = [2,1,3,2,1]
Output: 3
Explanation: It's optimal to perform three operations:
1. change nums[0] to 1.
2. change nums[2] to 1.
3. change nums[3] to 1.
After performing the operations and sorting the numbers in each group, group 1 becomes equal to [0,1,2,3,4] and group 2 and group 3 become empty. Hence, res is equal to [0,1,2,3,4] which is sorted in non-decreasing order.
It can be proven that there is no valid sequence of less than three operations
class Solution {
    int f(int i,int prev,List<Integer> nums,int dp[][]){
        if(i==nums.size())
            return 0;
        if(dp[i][prev+1]!=-1) return dp[i][prev+1];
        int t1=0;
        if(prev==-1||nums.get(prev)<=nums.get(i))
        t1=1+f(i+1,i,nums,dp);
        int t2=f(i+1,prev,nums,dp);
        return dp[i][prev+1]=Math.max(t1,t2);
            
    }
    public int minimumOperations(List<Integer> nums) {
        int n=nums.size();
        int dp[][]=new int[n][n+1];
        for(int row[]:dp)Arrays.fill(row,-1);
        return n-f(0,-1,nums,dp);
    }
}
